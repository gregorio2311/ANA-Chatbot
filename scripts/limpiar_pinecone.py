"""
LIMPIEZA COMPLETA DE PINECONE - ANA-CHATBOT
==========================================

Este script elimina completamente todos los vectores de la base de datos Pinecone.
√ötil para limpiar datos antiguos o corrompidos antes de una nueva subida.

FUNCIONALIDADES:
- Conecta con Pinecone usando credenciales seguras
- Elimina todos los vectores del √≠ndice especificado
- Proporciona confirmaci√≥n antes de la eliminaci√≥n
- Muestra estad√≠sticas antes y despu√©s de la limpieza

REQUISITOS:
- Variables de entorno configuradas (.env):
  * PINECONE_API_KEY: Clave API de Pinecone
  * PINECONE_HOST: URL del host de Pinecone
  * PINECONE_INDEX_NAME: Nombre del √≠ndice (opcional, default: "ana")

USO:
    python scripts/limpiar_pinecone.py

EJEMPLO DE SALIDA:
    üöÄ Iniciando limpieza completa de Pinecone...
    üìä Estad√≠sticas actuales del √≠ndice 'ana':
       - Total de vectores: 3524
       - Dimensiones: 1024
    ‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° TODOS los vectores del √≠ndice
    ¬øEst√° seguro de continuar? (s√≠/no): s√≠
    üóëÔ∏è Eliminando todos los vectores...
    ‚úÖ Limpieza completada exitosamente
    üìä Estad√≠sticas despu√©s de la limpieza:
       - Total de vectores: 0

DEPENDENCIAS:
- pinecone: Para conexi√≥n con base de datos vectorial
- python-dotenv: Para cargar variables de entorno

AUTOR: Equipo de desarrollo ANA-Chatbot
FECHA: 2024
"""

import os
import sys
from pinecone import Pinecone
from dotenv import load_dotenv

def conectar_pinecone(api_key: str, index_name: str):
    """
    Conecta a Pinecone serverless usando el SDK v3.
    """
    try:
        pc = Pinecone(api_key=api_key)
        index = pc.Index(index_name)
        
        # Verificar que el √≠ndice existe
        stats = index.describe_index_stats()
        print(f"‚úÖ Conectado al √≠ndice '{index_name}'")
        print(f"üìä Estad√≠sticas actuales:")
        print(f"   - Total de vectores: {stats.get('total_vector_count', 0)}")
        print(f"   - Dimensiones: {stats.get('dimension', 'N/A')}")
        
        return index

    except Exception as e:
        print(f"‚ùå Error conectando a Pinecone: {e}")
        return None

def mostrar_estadisticas(index):
    """
    Muestra estad√≠sticas detalladas del √≠ndice.
    """
    try:
        stats = index.describe_index_stats()
        print(f"\nüìä Estad√≠sticas del √≠ndice:")
        print(f"   - Total de vectores: {stats.get('total_vector_count', 0)}")
        print(f"   - Dimensiones: {stats.get('dimension', 'N/A')}")
        print(f"   - M√©trica: {stats.get('metric', 'N/A')}")
        print(f"   - Tipo de vector: {stats.get('vector_type', 'N/A')}")
        
        # Mostrar informaci√≥n por namespace
        namespaces = stats.get('namespaces', {})
        if namespaces:
            print(f"   - Namespaces:")
            for ns, ns_stats in namespaces.items():
                print(f"     * '{ns}': {ns_stats.get('vector_count', 0)} vectores")
        
        return stats
        
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")
        return None

def limpiar_indice(index):
    """
    Elimina todos los vectores del √≠ndice.
    """
    try:
        print("üóëÔ∏è Eliminando todos los vectores...")
        
        # Eliminar todos los vectores usando delete_all()
        index.delete(delete_all=True)
        
        print("‚úÖ Limpieza completada exitosamente")
        return True
        
    except Exception as e:
        print(f"‚ùå Error durante la limpieza: {e}")
        return False

def confirmar_limpieza():
    """
    Solicita confirmaci√≥n del usuario antes de proceder.
    """
    print("\n‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° TODOS los vectores del √≠ndice")
    print("üí° Esta acci√≥n no se puede deshacer")
    
    while True:
        respuesta = input("¬øEst√° seguro de continuar? (s√≠/no): ").lower().strip()
        
        if respuesta in ['s√≠', 'si', 's', 'yes', 'y']:
            return True
        elif respuesta in ['no', 'n']:
            return False
        else:
            print("Por favor, responda 's√≠' o 'no'")

def main():
    """
    Funci√≥n principal que ejecuta la limpieza completa de Pinecone.
    """
    try:
        # Cargar variables de entorno
        load_dotenv()
        
        # Configuraci√≥n
        API_KEY = os.getenv("PINECONE_API_KEY")
        HOST = os.getenv("PINECONE_HOST")
        INDEX_NAME = os.getenv("PINECONE_INDEX_NAME", "ana")
        
        # Validar credenciales
        if not API_KEY or not HOST:
            print("‚ùå Error: Faltan variables de entorno")
            print("üí° Configura PINECONE_API_KEY y PINECONE_HOST en tu archivo .env")
            return False
        
        print("üöÄ Iniciando limpieza completa de Pinecone...")
        
        # Conectar a Pinecone
        index = conectar_pinecone(API_KEY, INDEX_NAME)
        if index is None:
            return False
        
        # Mostrar estad√≠sticas actuales
        stats_antes = mostrar_estadisticas(index)
        if not stats_antes:
            return False
        
        # Confirmar con el usuario
        if not confirmar_limpieza():
            print("‚ùå Operaci√≥n cancelada por el usuario")
            return False
        
        # Realizar limpieza
        if limpiar_indice(index):
            # Mostrar estad√≠sticas despu√©s
            print("\nüìä Estad√≠sticas despu√©s de la limpieza:")
            stats_despues = mostrar_estadisticas(index)
            
            if stats_despues:
                vectores_eliminados = stats_antes.get('total_vector_count', 0) - stats_despues.get('total_vector_count', 0)
                print(f"\nüéâ Resumen:")
                print(f"   - Vectores eliminados: {vectores_eliminados}")
                print(f"   - √çndice limpiado exitosamente")
            
            return True
        else:
            return False
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ Proceso completado exitosamente")
    else:
        print("\n‚ùå El proceso fall√≥")
        sys.exit(1) 